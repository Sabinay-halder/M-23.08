package com.widevision.pregnantwoman.mother;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;

import com.mobsandgeeks.saripaar.ValidationError;
import com.mobsandgeeks.saripaar.Validator;
import com.mobsandgeeks.saripaar.annotation.NotEmpty;
import com.rengwuxian.materialedittext.MaterialEditText;
import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
import com.widevision.pregnantwoman.MainFragmentActivity;
import com.widevision.pregnantwoman.R;
import com.widevision.pregnantwoman.database.ActiveAndroidDBHelper;
import com.widevision.pregnantwoman.util.Constant;
import com.widevision.pregnantwoman.util.ObjectSerializer;
import com.widevision.pregnantwoman.util.PreferenceConnector;

import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * Created by newtrainee on 30/7/15.
 */
public class WomanHomeActivity extends ActionBarActivity implements DatePickerDialog.OnDateSetListener, Validator.ValidationListener {

    @NotEmpty(message = "Name is required.")
    @Bind(R.id.nameEt)
    MaterialEditText nameEt;
    @NotEmpty(message = "Please select Date of birth.")
    @Bind(R.id.dateofbirthEt)
    MaterialEditText dateofbirthEt;
    @NotEmpty(message = "Age is required.")
    @Bind(R.id.ageEt)
    MaterialEditText ageEt;
    @NotEmpty(message = "Please select Expected Date.")
    @Bind(R.id.expected_dateEt)
    MaterialEditText mExpecteConceiveDate;
    @NotEmpty(message = "Please select Expected Date.")
    @Bind(R.id.delivery_dateEt)
    EditText mExpecteDeliveryDate;
    @Bind(R.id.saveBt)
    Button saveBt;
    @Bind(R.id.cancelBt)
    Button cancelBt;
    @Bind(R.id.twin)
    CheckBox mTwinsChek;
    @Bind(R.id.back)
    ImageView mBackBtn;
    private Validator validator;
    private boolean aDate = false, bDate = false, DeliveryDate = false;
    private String nameStr = "", dobStr = "", ageStr = "", extectedDateStr = "", pregnancyMonth = "", twinsStr = "", expectedDeliveryDateStr = "";
    private ArrayList<Float> weightList = new ArrayList<Float>();
    private ArrayList<Integer> systolicBloodPressure = new ArrayList<Integer>();
    private ArrayList<Integer> diastolicBloodPressure = new ArrayList<Integer>();

    public void setupUI(View view) {

        //Set up touch listener for non-text box views to hide keyboard.
        if (!(view instanceof EditText)) {

            view.setOnTouchListener(new View.OnTouchListener() {

                public boolean onTouch(View v, MotionEvent event) {
                    Constant.hideSoftKeyboard(WomanHomeActivity.this);
                    return false;
                }

            });
        }

        //If a layout container, iterate over children and seed recursion.
        if (view instanceof ViewGroup) {
            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
                View innerView = ((ViewGroup) view).getChildAt(i);
                setupUI(innerView);
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.home_activity_women);
        ButterKnife.bind(this);
        setupUI(findViewById(R.id.parent_homeactivitywomen));
        validator = new Validator(this);
        validator.setValidationListener(this);
        mBackBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        mTwinsChek.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                twinsStr = b ? "Yes" : "No";
                PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.TWINS, twinsStr);
            }
        });

        for (int i = 0; i < 40; i++) {
            weightList.add((float) i);
            systolicBloodPressure.add(i);
            diastolicBloodPressure.add(i);
        }

        dateofbirthEt.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                aDate = b;
                if (b) {
                    int year = 0, month = 0, day = 0;
                    Calendar now = Calendar.getInstance();
                    if (dateofbirthEt.getText().toString().trim().equals("")) {
                        year = now.get(Calendar.YEAR);
                        month = now.get(Calendar.MONTH);
                        day = now.get(Calendar.DAY_OF_MONTH);
                    } else {
                        DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                        DateTime selectedDate = formatter.parseDateTime(dateofbirthEt.getText().toString().trim());
                        year = selectedDate.getYear();
                        month = selectedDate.getMonthOfYear() - 1;
                        day = selectedDate.getDayOfMonth();
                    }
                    DatePickerDialog dpd = DatePickerDialog.newInstance(
                            WomanHomeActivity.this,
                            year,
                            month,
                            day
                    );
                    dpd.setMaxDate(now);
                    dpd.show(getFragmentManager(), "Datepickerdialog");
                }
            }
        });
        dateofbirthEt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                aDate = true;
                int year = 0, month = 0, day = 0;
                Calendar now = Calendar.getInstance();
                if (dateofbirthEt.getText().toString().trim().equals("")) {
                    year = now.get(Calendar.YEAR);
                    month = now.get(Calendar.MONTH);
                    day = now.get(Calendar.DAY_OF_MONTH);
                } else {
                    DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                    DateTime selectedDate = formatter.parseDateTime(dateofbirthEt.getText().toString().trim());
                    year = selectedDate.getYear();
                    month = selectedDate.getMonthOfYear() - 1;
                    day = selectedDate.getDayOfMonth();
                }
                DatePickerDialog dpd = DatePickerDialog.newInstance(
                        WomanHomeActivity.this,
                        year,
                        month,
                        day
                );
                dpd.setMaxDate(now);
                dpd.show(getFragmentManager(), "Datepickerdialog");
            }
        });
        mExpecteConceiveDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                bDate = true;
                int year = 0, month = 0, day = 0;
                Calendar now = Calendar.getInstance();
                if (mExpecteConceiveDate.getText().toString().trim().equals("")) {
                    year = now.get(Calendar.YEAR);
                    month = now.get(Calendar.MONTH);
                    day = now.get(Calendar.DAY_OF_MONTH);
                } else {
                    DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                    DateTime selectedDate = formatter.parseDateTime(mExpecteConceiveDate.getText().toString().trim());
                    year = selectedDate.getYear();
                    month = selectedDate.getMonthOfYear() - 1;
                    day = selectedDate.getDayOfMonth();
                }
                DatePickerDialog dpd = DatePickerDialog.newInstance(
                        WomanHomeActivity.this,
                        year,
                        month,
                        day
                );
                dpd.setMaxDate(now);
                dpd.show(getFragmentManager(), "Datepickerdialog");
            }
        });
        mExpecteConceiveDate.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                bDate = b;
                if (b) {
                    int year = 0, month = 0, day = 0;
                    Calendar now = Calendar.getInstance();

                    if (mExpecteConceiveDate.getText().toString().trim().equals("")) {
                        year = now.get(Calendar.YEAR);
                        month = now.get(Calendar.MONTH);
                        day = now.get(Calendar.DAY_OF_MONTH);
                    } else {
                        DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                        DateTime selectedDate = formatter.parseDateTime(mExpecteConceiveDate.getText().toString().trim());
                        year = selectedDate.getYear();
                        month = selectedDate.getMonthOfYear() - 1;
                        day = selectedDate.getDayOfMonth();
                    }
                    DatePickerDialog dpd = DatePickerDialog.newInstance(
                            WomanHomeActivity.this,
                            year,
                            month,
                            day
                    );
                    dpd.setMaxDate(now);
                    dpd.show(getFragmentManager(), "Datepickerdialog");
                }
            }
        });
        mExpecteDeliveryDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                DeliveryDate = true;
                int year = 0, month = 0, day = 0;
                Calendar now = Calendar.getInstance();
                Calendar minimum = Calendar.getInstance();

                if (mExpecteDeliveryDate.getText().toString().trim().equals("")) {
                    year = now.get(Calendar.YEAR);
                    month = now.get(Calendar.MONTH);
                    day = now.get(Calendar.DAY_OF_MONTH);
                    if (!mExpecteConceiveDate.getText().toString().trim().equals("")) {
                        DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                        DateTime selectedDate = formatter.parseDateTime(mExpecteConceiveDate.getText().toString().trim());
                        minimum.set(selectedDate.getYear(), selectedDate.getMonthOfYear() - 1, selectedDate.getDayOfMonth());
                    } else {
                        minimum.set(year, month, day);
                    }
                } else {
                    DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                    DateTime selectedDate = formatter.parseDateTime(mExpecteDeliveryDate.getText().toString().trim());
                    year = selectedDate.getYear();
                    month = selectedDate.getMonthOfYear() - 1;
                    day = selectedDate.getDayOfMonth();
                }
                DatePickerDialog dpd = DatePickerDialog.newInstance(
                        WomanHomeActivity.this,
                        year,
                        month,
                        day
                );
                dpd.setMinDate(minimum);
                dpd.show(getFragmentManager(), "Datepickerdialog");
            }
        });
        mExpecteDeliveryDate.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                DeliveryDate = b;
                if (b) {
                    int year = 0, month = 0, day = 0;
                    Calendar now = Calendar.getInstance();
                    Calendar minimum = Calendar.getInstance();
                    if (mExpecteDeliveryDate.getText().toString().trim().equals("")) {
                        year = now.get(Calendar.YEAR);
                        month = now.get(Calendar.MONTH);
                        day = now.get(Calendar.DAY_OF_MONTH);
                        if (!mExpecteConceiveDate.getText().toString().trim().equals("")) {
                            DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                            DateTime selectedDate = formatter.parseDateTime(mExpecteConceiveDate.getText().toString().trim());
                            minimum.set(selectedDate.getYear(), selectedDate.getMonthOfYear() - 1, selectedDate.getDayOfMonth());
                        } else {
                            minimum.set(year, month, day);
                        }
                    } else {
                        DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                        DateTime selectedDate = formatter.parseDateTime(mExpecteDeliveryDate.getText().toString().trim());
                        year = selectedDate.getYear();
                        month = selectedDate.getMonthOfYear() - 1;
                        day = selectedDate.getDayOfMonth();
                    }
                    DatePickerDialog dpd = DatePickerDialog.newInstance(
                            WomanHomeActivity.this,
                            year,
                            month,
                            day
                    );
                    dpd.setMinDate(now);
                    dpd.show(getFragmentManager(), "Datepickerdialog");
                }
            }
        });
        saveBt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                validator.validate();
            }
        });
        cancelBt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Constant.setAlert(WomanHomeActivity.this, getResources().getString(R.string.close_permission));
            }
        });
    }


    @Override
    public void onValidationFailed(List<ValidationError> errors) {
        Constant.setAlert(WomanHomeActivity.this, errors.get(0).getCollatedErrorMessage(WomanHomeActivity.this));
    }

    @Override
    public void onValidationSucceeded() {

        DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
        try {
            DateTime conceciveDate = formatter.parseDateTime(mExpecteConceiveDate.getText().toString().trim());
            DateTime deliveryDate = formatter.parseDateTime(mExpecteDeliveryDate.getText().toString().trim());
            if (deliveryDate.isAfter(conceciveDate)) {
                Log.e("", "concecive date >>>>>>>>>>>>" + conceciveDate);
                Log.e("", "delivery date >>>>>>>>>>>>>" + deliveryDate);
                int period = Constant.getPregnancyMonth(conceciveDate, deliveryDate);
                if (period > 9 || period < 7) {
                    Constant.setAlert(WomanHomeActivity.this, "The difference between Conceive date & Delivery date should be greater than 8 Months.");
                } else {
                    pregnancyMonth = "" + period;
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.IS_FIRSTTIME_MOTHER, "No");
                    ActiveAndroidDBHelper activeAndroidDBHelper = ActiveAndroidDBHelper.getInstance();
                    Calendar calendar = Calendar.getInstance();
                    String currentDate = calendar.get(Calendar.DAY_OF_MONTH) + "-" + calendar.get(Calendar.MONTH) + "-" + calendar.get(Calendar.YEAR);
                    nameStr = nameEt.getText().toString().trim();
                    dobStr = dateofbirthEt.getText().toString().trim();
                    ageStr = ageEt.getText().toString().trim();
                    extectedDateStr = mExpecteConceiveDate.getText().toString().trim();
                    expectedDeliveryDateStr = mExpecteDeliveryDate.getText().toString().trim();
                    activeAndroidDBHelper.addMotherDetail(nameStr, currentDate, dobStr, ageStr, extectedDateStr, expectedDeliveryDateStr, pregnancyMonth);

                    Constant.type = 1;
                    startActivity(new Intent(WomanHomeActivity.this, MainFragmentActivity.class));
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.MOTHER_NAME, nameStr);
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.MOTHER_DOB, dobStr);
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.MOTHER_AGE, ageStr);
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.EXPECTED_DATE, extectedDateStr);
                    PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.EXPECTED_DELIVERY_DATE, expectedDeliveryDateStr);

                    //save the task list to preference
                    SharedPreferences prefs = getSharedPreferences("list_file", Context.MODE_PRIVATE);
                    SharedPreferences.Editor editor = prefs.edit();
                    try {
                        editor.putString("weight_list", ObjectSerializer.serialize(weightList));
                        editor.putString("systolic_list", ObjectSerializer.serialize(systolicBloodPressure));
                        editor.putString("diastolic_list", ObjectSerializer.serialize(diastolicBloodPressure));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    editor.commit();
                    finish();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onDateSet(DatePickerDialog datePickerDialog, int i, int i2, int i3) {

        i2++;
        String dd = "" + i3;
        String mm = "" + i2;
        if (dd.length() == 1) {
            dd = "0" + dd;
        }
        if (mm.length() == 1) {
            mm = "0" + mm;
        }
        String date = i + "-" + mm + "-" + dd;
        i3 = (i3 == 31) ? 20 : i3;
        if (aDate) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat(Constant.datePattern);
                Date selectedDate = sdf.parse(+i + "-" + i2 + "-" + i3);
                Calendar calendar = Calendar.getInstance();
                Date currentDate = sdf.parse(calendar.get(Calendar.YEAR) + "-" + calendar.get(Calendar.MONTH) + "-" + calendar.get(Calendar.DAY_OF_MONTH));
                if (selectedDate.after(currentDate)) {
                    Constant.setAlert(WomanHomeActivity.this, "please select valid date.");
                    return;
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }

            dateofbirthEt.setText(date.trim().toString());
            Period age = Constant.getDate(i, i2, i3);
            int Month = age.getMonths();
            int Year = age.getYears();
            ageStr = Year + "Y" + Month + "M";
            if (Year == 0) {
                String m = (age.getMonths() >= 1) ? "Month" : "Months";
                ageEt.setText(age.getMonths() + m);
                return;
            } else if (Month == 0) {
                String m = (age.getYears() <= 1) ? "Year" : "Years";
                ageEt.setText(age.getYears() + "," + m);
                return;
            } else {
                String m = (Month >= 1) ? "Month" : "Months";
                String y = (Year <= 1) ? "Year" : "Years";
                ageEt.setText(Year + " " + y + "," + Month + " " + m);
                return;
            }
        } else if (bDate) {
           /* try {
                SimpleDateFormat sdf = new SimpleDateFormat(Constant.datePattern);
                Date selectedDate = sdf.parse(+i + "-" + i2 + "-" + i3);
                Calendar calendar = Calendar.getInstance();
                Date currentDate = sdf.parse(calendar.get(Calendar.YEAR) + "-" + calendar.get(Calendar.MONTH) + "-" + calendar.get(Calendar.DAY_OF_MONTH));

            } catch (ParseException e) {
                e.printStackTrace();
            }*/

            mExpecteConceiveDate.setText(date.toString().trim());
            PreferenceConnector.writeString(WomanHomeActivity.this, PreferenceConnector.START_DATE, date);
        } else if (DeliveryDate) {
          /*  int m = Constant.getPregnancyMonth(i, i2, i3);
            if (m > 9) {
                Constant.setAlert(WomanHomeActivity.this, "please enter valid date.");
                return;
            }
            Constant.setAlert(WomanHomeActivity.this, "pregnancy month is " + (9 - m));*/
            mExpecteDeliveryDate.setText(date.toString().trim());
//            pregnancyMonth = "" + (9 - m);
        }
        aDate = false;
        bDate = false;
        DeliveryDate = false;
    }

}
