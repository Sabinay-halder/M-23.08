package com.widevision.pregnantwoman.baby;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.EditText;

import com.mobsandgeeks.saripaar.ValidationError;
import com.mobsandgeeks.saripaar.Validator;
import com.mobsandgeeks.saripaar.annotation.NotEmpty;
import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout;
import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;
import com.widevision.pregnantwoman.MainFragmentActivity;
import com.widevision.pregnantwoman.R;
import com.widevision.pregnantwoman.database.ActiveAndroidDBHelper;
import com.widevision.pregnantwoman.database.BabyInfoTable;
import com.widevision.pregnantwoman.model.HideKeyFragment;
import com.widevision.pregnantwoman.util.Constant;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import java.util.Calendar;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * Created by mercury-two on 19/8/15.
 */
public class BabyAppointmentRequest extends HideKeyFragment implements TimePickerDialog.OnTimeSetListener, DatePickerDialog.OnDateSetListener, Validator.ValidationListener {

    @NotEmpty(message = "Name is required.")
    @Bind(R.id.nameEdt)
    EditText nameET;
    @NotEmpty(message = "Doctor Name is required.")
    @Bind(R.id.doctorNameEdt)
    EditText mDoctorNameEdt;
    @NotEmpty(message = "enter appointment Time.")
    @Bind(R.id.timeEdt)
    EditText mTimeEdt;
    @NotEmpty(message = "enter appointment Date.")
    @Bind(R.id.dateEdt)
    EditText dateET;
    @Bind(R.id.saveBtn)
    Button mSaveBtn;
    @Bind(R.id.cancelBtn)
    Button mCancelBtn;

    private boolean aDate = false, bDate = false;
    private ActiveAndroidDBHelper helper;
    private Validator validator;
    private long babyid;
    String name, date;
    int tag = 0;
    private Animation fadeInAnimation;


    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.appointment_activity, container, false);
        ButterKnife.bind(this, view);
        setupUI(view);
        final View myView = view.findViewById(R.id.appointment_parent);
        final View myViewSecond = view.findViewById(R.id.appointment_parent_second);
        final ViewTreeObserver obs = myView.getViewTreeObserver();
        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
            @Override
            public boolean onPreDraw() {
                if (tag == 0) {
                    fadeInAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.fade_in);
                    float finalRadius = Constant.hypo(myView.getWidth(), myView.getHeight());
                    Constant.animateReavel(getActivity(), fadeInAnimation, myView.getWidth() / 2, myView.getHeight() / 2, myView, myViewSecond, finalRadius);
                    tag = 1;
                }
                return true;
            }
        });
        helper = ActiveAndroidDBHelper.getInstance();
        validator = new Validator(this);
        validator.setValidationListener(this);

        Intent in = getActivity().getIntent();
        Bundle b = in.getExtras();
        String match = b.getString("1111");

        /*Fetch Value From Dialog List*/

        if(match.equals("dialog")){
            babyid = b.getLong("ID");
            name = b.getString("NAME");
            date = b.getString("DATE");
//            babyid = Long.parseLong(babyi);
            nameET.setText(name);

        } else if(match.equals("info")){

              /*Fetch Value From Database*/
            List<BabyInfoTable> list = helper.babyDetail();
            if (list != null && list.size() != 0) {
                for (BabyInfoTable item : list) {
                    babyid = item.getId();
                    name = item.name ;
                    date = item.dobbaby;
                }
            }
            nameET.setText(name);


        }

         /*Date picker*/
        dateET.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                aDate = b;
                if (b) {
                    DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                    DateTime dt = formatter.parseDateTime(date);

                    Calendar calendar = Calendar.getInstance();
                    calendar.set(Calendar.DAY_OF_MONTH, dt.getDayOfMonth());
                    calendar.set(Calendar.MONTH, dt.getMonthOfYear()-1);
                    calendar.set(Calendar.YEAR, dt.getYear());

                    Calendar now = Calendar.getInstance();
                    DatePickerDialog dpd = DatePickerDialog.newInstance(
                            BabyAppointmentRequest.this,
                            now.get(Calendar.YEAR),
                            now.get(Calendar.MONTH),
                            now.get(Calendar.DAY_OF_MONTH)
                    );

                    dpd.setMaxDate(now);
                    dpd.setMinDate(calendar);

                    dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
                }
            }
        });

        dateET.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                aDate = true;
                DateTimeFormatter formatter = DateTimeFormat.forPattern(Constant.datePattern);
                DateTime dt = formatter.parseDateTime(date);

                Calendar calendar = Calendar.getInstance();
                calendar.set(Calendar.DAY_OF_MONTH, dt.getDayOfMonth());
                calendar.set(Calendar.MONTH, dt.getMonthOfYear()-1);
                calendar.set(Calendar.YEAR, dt.getYear());

                Calendar now = Calendar.getInstance();
                DatePickerDialog dpd = DatePickerDialog.newInstance(BabyAppointmentRequest.this, now.get(Calendar.YEAR),
                        now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                );
                dpd.setMinDate(calendar);
                dpd.setMaxDate(now);
                dpd.show(getActivity().getFragmentManager(), "Datepickerdialog");
            }
        });

        /*Start Time */
        mTimeEdt.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    Calendar calendar = Calendar.getInstance();
                    TimePickerDialog timePickerDialog = new TimePickerDialog().newInstance(BabyAppointmentRequest.this, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), false);
                    timePickerDialog.show(getActivity().getFragmentManager(), "Timepickerdialog");
                }
            }
        });

        /*Save Button*/
        mSaveBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                validator.validate();
            }
        });

         /*Cancle Button*/
        mCancelBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                MainFragmentActivity.fragmentManager.popBackStack();
            }
        });
        return view;
    }

    @Override
    public void onTimeSet(RadialPickerLayout radialPickerLayout, int hour, int min) {
        mTimeEdt.setText("" + hour + ":" + min);
    }

    @Override
    public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) {
        String mount = String.valueOf(month + 1);
        String da = String.valueOf(day);

        if (mount.length()<2){
            mount = "0"+mount;
        }
        if(da.length()<2){
            da= "0"+da;
        }
        String datesave = year + "-" + mount + "-" + da;
        dateET.setText(datesave);
    }

    @Override
    public void onValidationFailed(List<ValidationError> errors) {
        Constant.setAlert(getActivity(), errors.get(0).getCollatedErrorMessage(getActivity()));
    }

    @Override
    public void onValidationSucceeded() {
        String name = nameET.getText().toString().trim();
        String doctorName = mDoctorNameEdt.getText().toString().trim();
        String time = mTimeEdt.getText().toString().trim();
        String date = dateET.getText().toString().trim();
        helper.addAppointment(name, doctorName, date, time, Constant.getCurrentTime());
        Constant.babysaveAlert(getActivity(), "Appointment added Successfully.");
//        MainFragmentActivity.fragmentManager.popBackStack();

    }
}
